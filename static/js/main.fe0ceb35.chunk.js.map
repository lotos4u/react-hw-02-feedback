{"version":3,"sources":["components/Form/styles.module.scss","components/Form/index.jsx","components/Statistics/index.jsx","components/Feedback/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FeedbackForm","props","className","styles","button","onClick","onSubmit","defaultProps","FeedbackStatistics","countTotalFeedback","data","good","neutral","bad","total","Math","round","countPositiveFeedbackPercentage","Feedback","state","handleSubmit","answer","newState","setState","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,OAAS,yB,2JCGrBC,EAAe,SAACC,GAAD,OACjB,oCACI,wDACA,4BAAQC,UAAWC,IAAOC,OAAQC,QAAS,kBAAMJ,EAAMK,SAAS,UAAhE,QACA,4BAAQJ,UAAWC,IAAOC,OAAQC,QAAS,kBAAMJ,EAAMK,SAAS,aAAhE,WACA,4BAAQJ,UAAWC,IAAOC,OAAQC,QAAS,kBAAMJ,EAAMK,SAAS,SAAhE,SAQRN,EAAaO,aAAe,GAEbP,QChBTQ,EAAqB,SAACP,GAExB,IAAMQ,EAAqB,WACvB,OAAOR,EAAMS,KAAKC,KAAOV,EAAMS,KAAKE,QAAUX,EAAMS,KAAKG,KAW7D,OAAKZ,EAAMS,OAAUT,EAAMS,KAAKG,KAAOZ,EAAMS,KAAKE,SAAWX,EAAMS,KAAKC,MAIjE,oCACH,0CACA,oCAAUV,EAAMS,KAAKC,MACrB,uCAAaV,EAAMS,KAAKE,SACxB,mCAASX,EAAMS,KAAKG,KACpB,qCAAWJ,KACX,iDAlBoC,WACpC,IAAMK,EAAQL,IACd,OAAc,IAAVK,EACO,IAEJC,KAAKC,MAAM,KAAOf,EAAMS,KAAKC,KAAOV,EAAMS,KAAKE,SAAWE,GAAS,IAanDG,KAThB,IAsBfT,EAAmBD,aAAe,GAEnBC,QCtCTU,E,4MACFC,MAAQ,CACJR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTO,aAAe,SAACC,GACZ,IAAMC,EAAQ,eAAO,EAAKH,OAC1BG,EAASD,GAAU,EAAKF,MAAME,GAAU,EACxC,EAAKE,SAASD,I,uDAId,OAAO,oCACH,kBAAC,EAAD,CAAchB,SAAUkB,KAAKJ,eAC7B,kBAAC,EAAD,CAAoBV,KAAMc,KAAKL,a,GAhBpBM,aAqBvBP,EAASX,aAAe,GAETW,QClBAQ,MANf,WACI,OACI,kBAAC,EAAD,OCOYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fe0ceb35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__3_r4I\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\nconst FeedbackForm = (props) => (\n    <>\n        <h1>Please, leave a feedback</h1>\n        <button className={styles.button} onClick={() => props.onSubmit('good')}>Good</button>\n        <button className={styles.button} onClick={() => props.onSubmit('neutral')}>Neutral</button>\n        <button className={styles.button} onClick={() => props.onSubmit('bad')}>Bad</button>\n    </>\n);\n\nFeedbackForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\nFeedbackForm.defaultProps = {}\n\nexport default FeedbackForm;","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst FeedbackStatistics = (props) => {\n\n    const countTotalFeedback = () => {\n        return props.data.good + props.data.neutral + props.data.bad;\n    };\n\n    const countPositiveFeedbackPercentage = () => {\n        const total = countTotalFeedback();\n        if (total === 0) {\n            return '-';\n        }\n        return Math.round(100 * (props.data.good + props.data.neutral) / total) + '%';\n    };\n\n    if (!props.data || !(props.data.bad || props.data.neutral || props.data.good)) {\n        return '';\n    }\n\n    return <>\n        <h1>Statistics</h1>\n        <p>Good: {props.data.good}</p>\n        <p>Neutral: {props.data.neutral}</p>\n        <p>Bad: {props.data.bad}</p>\n        <p>Total: {countTotalFeedback()}</p>\n        <p>Positive feedback: {countPositiveFeedbackPercentage()}</p>\n    </>\n\n};\n\nFeedbackStatistics.propTypes = {\n    data: PropTypes.shape({\n        good: PropTypes.number,\n        neutral: PropTypes.number,\n        bad: PropTypes.number,\n    }),\n}\n\nFeedbackStatistics.defaultProps = {}\n\nexport default FeedbackStatistics;","import React, {Component} from \"react\";\nimport FeedbackForm from \"../Form\";\nimport FeedbackStatistics from \"../Statistics\";\n\nclass Feedback extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n\n    handleSubmit = (answer) => {\n        const newState = {...this.state};\n        newState[answer] = this.state[answer] + 1;\n        this.setState(newState);\n    };\n\n    render() {\n        return <>\n            <FeedbackForm onSubmit={this.handleSubmit}/>\n            <FeedbackStatistics data={this.state} />\n        </>;\n    }\n}\n\nFeedback.defaultProps = {}\n\nexport default Feedback;","import React from 'react';\nimport Feedback from \"./components/Feedback\";\n\nfunction App() {\n    return (\n        <Feedback/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}